---
title: Flex Grid Lite
---

.page
  %section.pvxxxl
    .section-content.margin-auto.txt-c
      %h1 Flex Grid Lite
      %h3.mbxl The Functional Flexbox Column Grid
      %p.margin-auto.type-md
        Flex Grid Lite is a lightweight column grid with all the power of flexbox. Built using a
        %a{:href => "http://www.jon.gold/2015/07/functional-css/", :target => "_blank"} functional CSS
        approach which means you get exactly what you ask for without any hidden surprises. The resulting file size is far smaller than a traditional column grid.
      %a.btn.btn-highlight-alt.btn-lg.mtxl{:href => "https://github.com/elliotdahl/flex-grid-lite", :target => "_blank"}
        .icon
          =partial 'images/svg-lib/github.svg'
        View on Github
  %section.pvxxxl#auto-layout
    .section-content.margin-auto.txt-c
      %h2.mbl The Basic Auto Layout
      %p.margin-auto.type-md Each column inside the grid is automatically assigned an equal share of the total. The columns are built to respect the layout over the content.

      .grid.mbxl.sg-grid
        .col .col
        .col .col
        .col .col
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col
                Auto Column
              .col
                Auto Column
              .col
                Auto Column
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#auto-layout
    .section-content.margin-auto.txt-c
      %h2.mbl No Gutters
      %p.margin-auto.type-md
        The padding is built into the grid but can be removed with a modifier class. The padding itself is based on the
        %a{:href => "https://builttoadapt.io/intro-to-the-8-point-grid-system-d2573cde8632", :target => "_blank"} 8 point grid system
        but can be modified in the
        %a{:href => "https://github.com/elliotdahl/flex-grid-lite", :target => "_blank"} variables
        file.

      .grid.mbxl.sg-grid.grid-nogutter
        .col .col
        .col .col
        .col .col
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid.grid-nogutter
              .col
                Auto Column
              .col
                Auto Column
              .col
                Auto Column
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#percent-columns
    .section-content.margin-auto.txt-c
      %h2.mbl Percentage Based Columns
      %p.margin-auto.type-md Based on the familiar n/12 column system.

      .grid.mvxl.sg-grid
        .col.col-3 .col.col-3
        .col.col-9 .col.col-9
      .grid.mvxl.sg-grid
        .col.col-4 .col.col-4
        .col.col-4 .col.col-4
        .col.col-4 .col.col-4
      .grid.mvxl.sg-grid
        .col.col-5 .col.col-5
        .col.col-2 .col.col-2
        .col.col-2 .col.col-2
        .col.col-3 .col.col-3
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col.col-3
                25% (3/12)
              .col.col-9
                75% (9/12)
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#grow-columns
    .section-content.margin-auto.txt-c
      %h2.mbl Flex Grow Columns
      %p.margin-auto.type-md
        Based on
        %a{:href => "https://css-tricks.com/almanac/properties/f/flex-grow/", :target => "_blank"} flex-grow
        this layout style allows for dynamic content distribution. These columns will respect their given ratio and resist dropping onto a second row unlike a percentage based column.

      .grid.mvxl.sg-grid
        .col.col-grow-2 .col.col-grow-2
        .col .col
        .col .col
      .grid.mvxl.sg-grid
        .col.col-grow-3 .col.col-grow-3
        .col.col-grow-2 .col.col-grow-2
        .col .col
      .grid.mvxl.sg-grid
        .col.col-grow-3 .col.col-grow-3
        .col .col
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col.col-grow-3
                Grow 3 Columns
              .col
                Auto Column
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#fixed-columns
    .section-content.margin-auto.txt-c
      %h2.mbl Fixed Columns
      %p.margin-auto.type-md Add in the fixed column class and pass the column a defined width or allow content like an image to dictate the desired width. It's recommended to fill the space with dynamic flex columns however you can mix in percent based columns too. Utilizing a fixed column with only percent based columns will make it difficult to reach 100%.
      .grid.mtxl
        .col.col-fixed{:style => "width:168px;"}
          .mono.type-orange-1 Fixed 168px
          .sg-box-outline
        .col
          .mono.type-orange-1 Auto Width
          .sg-box-outline
      .grid.sg-grid
        .col.col-fixed{:style => "width:168px;"} .col.col-fixed
        .col .col
        .col .col
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col.col-fixed{:style => "width:168px;"}
                col col-fixed
              .col
                col
              .col
                col
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#mixed-columns
    .section-content.margin-auto.txt-c
      %h2.mbl Mixed Columns
      %p.margin-auto.type-md This is the real power of flexbox at work in your layouts.
      .grid.mtxl
        .col.col-fixed{:style => "width:168px;"}
          .mono.type-orange-1 Fixed 168px
          .sg-box-outline
        .col
          .mono.type-orange-1 Dynamic Width
          .sg-box-outline
      .grid.mbxl.sg-grid
        .col.col-fixed{:style => "width:168px;"} .col.col-fixed
        .col.col-grow-2 .col.col-grow-2
        .col .col

      .grid.mtxl
        .col.col-fixed{:style => "width:168px;"}
          .mono.type-orange-1 Fixed 168px
          .sg-box-outline
        .col
          .mono.type-orange-1 Dynamic Width
          .sg-box-outline
        .col.col-3
          .mono.type-orange-1 25% of Total Width
          .sg-box-outline
      .grid.mbxl.sg-grid
        .col.col-fixed{:style => "width:168px;"} .col.col-fixed
        .col.col-grow-2 .col.col-grow-2
        .col .col
        .col.col-3 .col.col-3
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col.col-fixed{:style => "width:168px;"}
                Fixed Column
              .col.col-grow-2
                Grow 2 Column
              .col
                Auto Column
              .col.col-3
                25% (3/12)
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#content-alignment
    .section-content.margin-auto.txt-c
      %h2.mbl Content Alignment
      %p.margin-auto.type-md Vertically align the content inside of a column.
      .grid.mvxl.sg-grid
        .col.col-top{:style => "height:96px;"} .col-top
        .col.col-middle{:style => "height:96px;"} .col-middle
        .col.col-bottom{:style => "height:96px;"} .col-bottom
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col.col-top{:style => "height:96px;"}
                Content aligned to top
              .col.col-middle{:style => "height:96px;"}
                Content aligned to middle
              .col.col-bottom{:style => "height:96px;"}
                Content aligned to bottom
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#column-vertical-alignment
    .section-content.margin-auto.txt-c
      %h2.mbl Column Vertical Alignment
      %p.margin-auto.type-md
        Columns alignment relative to each other inside of the
        %code .grid
        container.

      .grid.mvxl.sg-grid
        .col.col-align-top .col-align-top
        .col.col-align-middle .col-align-middle
        .col.col-align-bottom .col-align-bottom
        .col{:style => "height:112px;"}
          %div Tall column expanding
          %div the height of
          %div the grid container
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col.col-align-top
                Top Aligned Column
              .col.col-align-middle
                Middle Aligned Column
              .col.col-align-bottom
                Bottom Aligned Column
              .col{:style => "height:112px;"}
                Tall Column
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#column-horizontal-alignment
    .section-content.margin-auto.txt-c
      %h2.mbl Grid Horizontal Alignment
      %p.margin-auto.type-md
        Apply modifier classes to the
        %code .grid
        element to change the alignment of columns.

      .grid.mvxl.grid-start.sg-grid
        .col.col-6 .grid-start .col.col-6
      .grid.mvxl.grid-center.sg-grid

        .col.col-3 .grid-center .col.col-3
        .col.col-3 .grid-center .col.col-3
      .grid.mvxl.grid-end.sg-grid
        .col.col-6 .grid-end .col.col-6
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid.grid-end
              .col.col-6
                Aligned to the end
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#column-distribution
    .section-content.margin-auto.txt-c
      %h2.mbl Column Distribution
      %p.margin-auto.type-md Distribute space around or between columns equally.

      .grid.mvxl.grid-around.sg-grid
        .col.col-3 .grid-around .col.col-3
        .col.col-3 .grid-around .col.col-3
        .col.col-3 .grid-around .col.col-3
      .grid.mvxl.grid-between.sg-grid
        .col.col-3 .grid-between .col.col-3
        .col.col-3 .grid-between .col.col-3
        .col.col-3 .grid-between .col.col-3
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid.grid-between
              .col.col-3
                Equal space between columns
              .col.col-3
                Equal space between columns
              .col.col-3
                Equal space between columns
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#column-ordering
    .section-content.margin-auto.txt-c
      %h2.mbl Column Ordering
      %p.margin-auto.type-md
        Change the order of columns by using the modifier classes
        %code .col-first
        to move a column to the first position or
        %code .col-last
        to move it to the last position.

      .grid.mvxl.sg-grid
        .col 1
        .col 2
        .col 3
      .grid.mvxl.sg-grid
        .col 1
        .col 2
        .col.col-first .col-first
      .grid.mvxl.sg-grid
        .col.col-last .col-last
        .col 2
        .col 3
      %pre.language-markup.code-display.mbxl
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col.col-last
                1st Column
              .col
                2nd Column
              .col
                3rd Column
            ]).render
          :preserve
            #{example_html}
      %p.margin-auto.type-md
        Use
        %code .grid-reverse
        to reverse the order of all columns.

      .grid.mvxl.sg-grid.grid-reverse
        .col 1
        .col 2
        .col 3
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid.grid-reverse
              .col
                1st Column
              .col
                2nd Column
              .col
                3rd Column
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#grid-nesting
    .section-content.margin-auto.txt-c
      %h2.mbl Grid Nesting
      %p.margin-auto.type-md Grids nest easily with no cascading conflicts. Great for complex layouts.

      .grid.mvxl.sg-grid
        .col
          Auto Column
          .grid
            .col
              Nested inside
            .col
              Nested inside
        .col
          Auto Column
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col
                Auto Column
                .grid
                  .col
                    Nested Inside
                  .col
                    Nested Inside
              .col
                Auto Column
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#media-break-points
    .section-content.margin-auto.txt-c
      %h2.mbl Media Breakpoints
      %p.margin-auto.type-md
        Media breakpoint classes define the screen size a column should go to 100%. The small
        %code .col-sm
        snaps to 100% at 480px,
        %code .col-md
        at 624px, and
        %code .col-lg
        at 744px. The breakpoint classes will overwrite any other percentage or grow based modifier class. Nesting grids can create more complex responsive layouts.


      .grid.mvxl.sg-grid
        .col.col-md .col.col-md
        .col.col-md .col.col-md
        .col.col-lg .col.col-lg
      .grid.mvxl.sg-grid
        .col.col-sm .col.col-sm
        .col.col-5.col-sm .col.col-5.col-sm
        .col.col-lg .col.col-lg
      .grid.mvxl.sg-grid
        .col.col-md.col-grow-2 .col.col-grow-2.col-md
        .col.col-md .col.col-md
        .col.col-lg .col.col-lg
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col
                Auto Column
              .col
                Auto Column
              .col
                Auto Column
            ]).render
          :preserve
            #{example_html}
  %section.mtxxxl.pvxxxl.footer#footer
    .section-content.margin-auto.txt-c
      %p.margin-auto.type-md.mbn
        Contact me
        %a{:href => "https://twitter.com/elliotdahl", :target => "_blank"} @elliotdahl
      %p.margin-auto.type-md.mbn
        See more crazy ideas at
        %a{:href => "http://elliotdahl.com/", :target => "_blank"} elliotdahl.com
//Google Analytics Tracking
:javascript
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-12878993-7', 'auto');
  ga('send', 'pageview');
