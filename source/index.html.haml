---
title: 8 Gauge Styleguide
---

.page
  %section.pvxxxl
    .section-content.margin-auto.txt-c
      %h1 Flex Grid
      %h4.mbxl The Functional Flexbox Column Grid
      %p.margin-auto.type-md Flex Grid is built on flexbox with a functional CSS approach. This means you get the exact functionality you ask for without any hidden surprises. The padding is built into the grid but can be removed with a modifier class. The padding itself is based on the 8 point grid system but can be modified in the SCSS files.
  %section.pvxxxl#auto-layout
    .section-content.margin-auto.txt-c
      %h2.mbl The Basic Auto Layout
      %p.margin-auto.type-md Each column inside the grid is automatically assigned an equal share of the total. If I have three columns each one receives a third of the total width. They will do their best to respect their content before the even distribution. Be aware of this with text content by either ensuring it wraps or ellipsizes.

      .grid.mbxl.sg-grid
        .col .col
        .col .col
        .col .col
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col
                Auto Column
              .col
                Auto Column
              .col
                Auto Column
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#percent-columns
    .section-content.margin-auto.txt-c
      %h2.mbl Percentage Based Columns
      %p.margin-auto.type-md Based on the familiar n/12 column system.

      .grid.mvxl.sg-grid
        .col.col-3 .col.col-3
        .col.col-9 .col.col-9
      .grid.mvxl.sg-grid
        .col.col-4 .col.col-4
        .col.col-4 .col.col-4
        .col.col-4 .col.col-4
      .grid.mvxl.sg-grid
        .col.col-5 .col.col-5
        .col.col-2 .col.col-2
        .col.col-2 .col.col-2
        .col.col-3 .col.col-3
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col.col-3
                25% (3/12)
              .col.col-9
                75% (9/12)
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#grow-columns
    .section-content.margin-auto.txt-c
      %h2.mbl Flex Grow Columns
      %p.margin-auto.type-md Based on flex-grow this layout style allows for dynamic content distribution. The flex-grow will attempt to respect it's given ratio until the content of the column exceeds its parameters. This is the only reason a flex-grow based column will ever drop onto another row.

      .grid.mvxl.sg-grid
        .col.col-grow-2 .col.col-grow-2
        .col .col
        .col .col
      .grid.mvxl.sg-grid
        .col.col-grow-3 .col.col-grow-3
        .col.col-grow-2 .col.col-grow-2
        .col .col
      .grid.mvxl.sg-grid
        .col.col-grow-3 .col.col-grow-3
        .col .col
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col.col-grow-3
                Grow 3 Columns
              .col
                Auto Column
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#fixed-columns
    .section-content.margin-auto.txt-c
      %h2.mbl Fixed Columns
      %p.margin-auto.type-md Add in the fixed column class and pass the column a defined width or allow content like an image to dictate the desired width. It's recommended to fill the space with dynamic flex columns however you can mix in percent based columns too. Utilizing a fixed column with only percent based columns will make it difficult to reach 100%.
      .grid.mtxl
        .col.col-fixed{:style => "width:168px;"}
          .mono.type-orange-1 Fixed 168px
          .sg-box-outline
        .col
          .mono.type-orange-1 Auto Width
          .sg-box-outline
      .grid.sg-grid
        .col.col-fixed{:style => "width:168px;"} .col.col-fixed
        .col .col
        .col .col
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col.col-fixed{:style => "width:168px;"}
                col col-fixed
              .col
                col
              .col
                col
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#mixed-columns
    .section-content.margin-auto.txt-c
      %h2.mbl Mixed Columns
      %p.margin-auto.type-md This is the real power of flexbox at work in your layouts.
      .grid.mtxl
        .col.col-fixed{:style => "width:168px;"}
          .mono.type-orange-1 Fixed 168px
          .sg-box-outline
        .col
          .mono.type-orange-1 Dynamic Width
          .sg-box-outline
      .grid.mbxl.sg-grid
        .col.col-fixed{:style => "width:168px;"} .col.col-fixed
        .col.col-grow-2 .col.col-grow-2
        .col .col

      .grid.mtxl
        .col.col-fixed{:style => "width:168px;"}
          .mono.type-orange-1 Fixed 168px
          .sg-box-outline
        .col
          .mono.type-orange-1 Dynamic Width
          .sg-box-outline
        .col.col-3
          .mono.type-orange-1 25% of Total Width
          .sg-box-outline
      .grid.mbxl.sg-grid
        .col.col-fixed{:style => "width:168px;"} .col.col-fixed
        .col.col-grow-2 .col.col-grow-2
        .col .col
        .col.col-3 .col.col-3
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col.col-fixed{:style => "width:168px;"}
                Fixed Column
              .col.col-grow-2
                Grow 2 Column
              .col
                Auto Column
              .col.col-3
                25% (3/12)
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#content-alignment
    .section-content.margin-auto.txt-c
      %h2.mbl Content Alignment
      %p.margin-auto.type-md Align the content inside of a column
      .grid.mvxl.sg-grid
        .col.col-top{:style => "height:96px;"}
          col-top
        .col.col-middle{:style => "height:96px;"}
          col-middle
        .col.col-bottom{:style => "height:96px;"}
          col-bottom
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col.col-top{:style => "height:96px;"}
                Content aligned to top
              .col.col-middle{:style => "height:96px;"}
                Content aligned to middle
              .col.col-bottom{:style => "height:96px;"}
                Content aligned to bottom
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#column-vertical-alignment
    .section-content.margin-auto.txt-c
      %h2.mbl Column Vertical Alignment
      %p.margin-auto.type-md Columns alignment relative to each other

      .grid.mvxl.sg-grid
        .col.col-align-top
          col-align-top
        .col.col-align-middle
          col-align-middle
        .col.col-align-bottom
          col-align-bottom
        .col
          Maecenas sed diam eget risus varius blandit sit amet non magna.
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col
                Auto Column
              .col
                Auto Column
              .col
                Auto Column
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#column-horizontal-alignment
    .section-content.margin-auto.txt-c
      %h2.mbl Grid Horizontal Alignment
      %p.margin-auto.type-md Grid alignment of columns

      .grid.mvxl.grid-start.sg-grid
        .col.col-6 .grid-start .col.col-6
      .grid.mvxl.grid-center.sg-grid
        .col.col-6 .grid-center .col.col-6
      .grid.mvxl.grid-end.sg-grid
        .col.col-6 .grid-end .col.col-6
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col
                Auto Column
              .col
                Auto Column
              .col
                Auto Column
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#column-distribution
    .section-content.margin-auto.txt-c
      %h2.mbl Column Distribution
      %p.margin-auto.type-md Distrubute columns around or between

      .grid.mvxl.grid-around.sg-grid
        .col.col-fixed .grid-around .col
        .col.col-fixed .grid-around .col
        .col.col-fixed .grid-around .col
      .grid.mvxl.grid-between.sg-grid
        .col.col-fixed .grid-between .col
        .col.col-fixed .grid-between .col
        .col.col-fixed .grid-between .col
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col
                Auto Column
              .col
                Auto Column
              .col
                Auto Column
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#column-ordering
    .section-content.margin-auto.txt-c
      %h2.mbl Column Ordering
      %p.margin-auto.type-md Change the order of columns by using modifier classes for first or last.

      .grid.mvxl.sg-grid
        .col 1
        .col 2
        .col 3
      .grid.mvxl.sg-grid
        .col 1
        .col 2
        .col.col-first .col-first
      .grid.mvxl.sg-grid
        .col.col-last .col-last
        .col 2
        .col 3
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col
                Auto Column
              .col
                Auto Column
              .col
                Auto Column
            ]).render
          :preserve
            #{example_html}
      %p.margin-auto.type-md
        Reverse the order of the grid by using
        %code .grid-reverse

      .grid.mvxl.sg-grid.grid-reverse
        .col 1
        .col 2
        .col 3
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col
                Auto Column
              .col
                Auto Column
              .col
                Auto Column
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#grid-nesting
    .section-content.margin-auto.txt-c
      %h2.mbl Grid Nesting
      %p.margin-auto.type-md Nest the grids deep for added functionality.

      .grid.mvxl.sg-grid
        .col
        .col
        .col
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col
                Auto Column
              .col
                Auto Column
              .col
                Auto Column
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#grid-nesting
    .section-content.margin-auto.txt-c
      %h2.mbl Media Break Points
      %p.margin-auto.type-md Media breakpoint classes define the screen size a column should go to 100%.

      .grid.mvxl.sg-grid
        .col
        .col
        .col
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col
                Auto Column
              .col
                Auto Column
              .col
                Auto Column
            ]).render
          :preserve
            #{example_html}
  -# %section.pvxxxl
  -#   .section-content.margin-auto.txt-c
  -#     %h2 Experimental
  -#     .grid.mvxl
  -#       .col
  -#         .sg-box
  -#           .mono .col
  -#       .col
  -#         .sg-box
  -#           .mono .col
  -#     .grid.mvxl.sg-grid
  -#       .col.col-grow-2
  -#         col col-grow-2
  -#       .col
  -#         col
  -#       .col
  -#         col
  -#     .grid.mvxl.sg-grid
  -#       .col.col-6 50%
  -#       .col.col-3 25%
  -#       .col.col-3 25%
  -#     .grid.mvxl.sg-grid
  -#       .col.col-9
  -#         3/4
  -#       .col.col-3
  -#         1/4
  -#
  -#
  -#     .grid.mvxxxl
  -#       .col
  -#         .sg-box
  -#           Etiam porta sem malesuada magna mollis euismod. Fusce
  -#       .col
  -#         .sg-box
  -#           1/2?
