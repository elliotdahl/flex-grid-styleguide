---
title: 8 Gauge Styleguide
---

.page
  %section.pvxxxl
    .section-content.margin-auto.txt-c
      %h1 Flex Grid
      %h4.mbxl The Functional Flexbox Column Grid
      %p.margin-auto.type-md Flex Grid is built on flexbox with a functional CSS approach. This means you get the exact functionality you ask for without any hidden surprises. The padding is built into the grid but can be removed with a modifier class. The padding itself is based on the 8 point grid system but can be modified in the SCSS files.
  %section.pvxxxl#auto-layout
    .section-content.margin-auto.txt-c
      %h2.mbl The Basic Auto Layout
      %p.margin-auto.type-md Each column inside the grid is automatically assigned an equal share of the total. If I have three columns each one receives a third of the total width. They will do their best to respect their content before the even distribution. Be aware of this with text content by either ensuring it wraps or ellipsizes.

      .grid.mbxl
        .col
          .sg-box
            .mono .col
        .col
          .sg-box
            .mono .col
        .col
          .sg-box
            .mono .col
  %section.pvxxxl#percent-columns
    .section-content.margin-auto.txt-c
      %h2.mbl Percentage Based Columns
      %p.margin-auto.type-md Based on the familiar n/12 column system.

      .grid.mvxl
        .col.col-3
          .sg-box
            .mono .col.col-3
        .col.col-4
          .sg-box
            .mono .col.col-4
        .col.col-5
          .sg-box
            .mono .col.col-5
      .grid.mvxl
        .col.col-4
          .sg-box
            .mono .col.col-4
        .col.col-4
          .sg-box
            .mono .col.col-4
        .col.col-4
          .sg-box
            .mono .col.col-4
      .grid.mvxl
        .col.col-5
          .sg-box
            .mono .col.col-5
        .col.col-2
          .sg-box
            .mono .col.col-2
        .col.col-2
          .sg-box
            .mono .col.col-2
        .col.col-3
          .sg-box
            .mono .col.col-3
  %section.pvxxxl#grow-columns
    .section-content.margin-auto.txt-c
      %h2.mbl Flex Grow Columns
      %p.margin-auto.type-md Based on flex-grow this layout style allows for dynamic content distribution. The flex-grow will attempt to respect it's given ratio until the content of the column exceeds its parameters. This is the only reason a flex-grow based column will ever drop onto another row.

      .grid.mvxl
        .col.col-grow-2
          .sg-box
            .mono .col.col-grow-2
        .col
          .sg-box
            .mono .col
        .col
          .sg-box
            .mono .col
      .grid.mvxl
        .col.col-grow-3
          .sg-box
            .mono .col.col-grow-3
        .col.col-grow-2
          .sg-box
            .mono .col.col-grow-2
        .col
          .sg-box
            .mono .col
      .grid.mvxl
        .col.col-grow-3
          .sg-box
            .mono .col.col-grow-3
        .col
          .sg-box
            .mono .col

      .devnote Look into this sizing calculation
  %section.pvxxxl#fixed-columns
    .section-content.margin-auto.txt-c
      %h2.mbl Fixed Columns
      %p.margin-auto.type-md Add in the fixed column class and pass the column a defined width or allow content like an image to dictate the desired width. It's recommended to fill the space with dynamic flex columns however you can mix in percent based columns too. Utilizing a fixed column with only percent based columns will make it difficult to reach 100%.
      .grid.mtxl
        .col.col-fixed{:style => "width:168px;"}
          .mono.type-orange-1 Fixed 168px
          .sg-box-outline
        .col
          .mono.type-orange-1 Auto Width
          .sg-box-outline
      .grid
        .col.col-fixed{:style => "width:168px;"}
          .sg-box
            .mono col col-fixed
        .col
          .sg-box
            .mono col
        .col
          .sg-box
            .mono col
      %pre.language-markup.code-display
        %code.language-markup
          :ruby
            example_html = h Haml::Engine.new( %[
            .grid
              .col.col-fixed{:style => "width:168px;"}
                col col-fixed
              .col
                col
              .col
                col
            ]).render
          :preserve
            #{example_html}
  %section.pvxxxl#mixed-columns
    .section-content.margin-auto.txt-c
      %h2.mbl Mixed Columns
      %p.margin-auto.type-md This is the real power of flexbox at work in your layouts.
      .grid.mtxl
        .col.col-fixed{:style => "width:168px;"}
          .mono.type-orange-1 Fixed 168px
          .sg-box-outline
        .col
          .mono.type-orange-1 Dynamic Width
          .sg-box-outline
      .grid.mbxl
        .col.col-fixed{:style => "width:168px;"}
          .sg-box
            .mono .col.col-fixed
        .col.col-grow-2
          .sg-box
            .mono .col.col-grow-2
        .col
          .sg-box
            .mono .col

      .grid.mtxl
        .col.col-fixed{:style => "width:168px;"}
          .mono.type-orange-1 Fixed 168px
          .sg-box-outline
        .col
          .mono.type-orange-1 Dynamic Width
          .sg-box-outline
        .col.col-3
          .mono.type-orange-1 25% of Total Width
          .sg-box-outline
      .grid.mbxl
        .col.col-fixed{:style => "width:168px;"}
          .sg-box
            .mono .col.col-fixed
        .col.col-grow-2
          .sg-box
            .mono .col.col-grow-2
        .col
          .sg-box
            .mono .col
        .col.col-3
          .sg-box
            .mono .col.col-3




  %section.pvxxxl#content-alignment
    .section-content.margin-auto.txt-c
      %h2.mbl Content Alignment
      %p.margin-auto.type-md Align the content inside of a column

      .grid.mvxl
        .col
          .sg-box.col-top{:style => "height:96px;"}
            .mono col-top
        .col.col-middle
          .sg-box.col-middle{:style => "height:96px;"}
            .mono col-middle
        .col
          .sg-box.col-bottom{:style => "height:96px;"}
            .mono col-bottom
      .devnote Look into a better way to structure the boxes.
      .grid.mvxl.sg-grid
        .col.col-top{:style => "height:96px;"}
          col-top
        .col.col-middle{:style => "height:96px;"}
          col-middle
        .col.col-bottom{:style => "height:96px;"}
          col-bottom
      .devnote This works but the margins are weird. What is the best method to do this?
  %section.pvxxxl#column-vertical-alignment
    .section-content.margin-auto.txt-c
      %h2.mbl Column Vertical Alignment
      %p.margin-auto.type-md Columns alignment relative to each other

      .grid.mvxl
        .col.col-align-top
          .sg-box
            .mono col-align-top
        .col.col-align-middle
          .sg-box
            .mono col-align-middle
        .col.col-align-bottom
          .sg-box
            .mono col-align-bottom
        .col
          .sg-box
            .mono Maecenas sed diam eget risus varius blandit sit amet non magna.
      .devnote Look into lighter color for filler text to downplay importance.
  %section.pvxxxl#column-horizontal-alignment
    .section-content.margin-auto.txt-c
      %h2.mbl Grid Horizontal Alignment
      %p.margin-auto.type-md Columns alignment relative to each other

      .grid.mvxl.grid-start
        .col.col-12
          .sg-box
            .mono grid-start col col-12
      .grid.mvxl.grid-center
        .col.col-12
          .sg-box
            .mono grid-center col col-12
      .grid.mvxl.grid-end
        .col.col-12
          .sg-box
            .mono grid-end col col-12

  %section.pvxxxl#column-horizontal-alignment
    .section-content.margin-auto.txt-c
      %h2.mbl Column Distribution
      %p.margin-auto.type-md Distrubute columns around or between

      .grid.mvxl.grid-around
        .col.col-fixed
          .sg-box
            .mono .grid-around col
        .col.col-fixed
          .sg-box
            .mono .grid-around col
        .col.col-fixed
          .sg-box
            .mono .grid-around col
      .grid.mvxl.grid-between
        .col.col-fixed
          .sg-box
            .mono grid-between col
        .col.col-fixed
          .sg-box
            .mono grid-between col
        .col.col-fixed
          .sg-box
            .mono grid-between col








  %section.pvxxxl
    .section-content.margin-auto.txt-c
      %h2 Experimental
      .grid.mvxl
        .col
          .sg-box
            .mono .col
        .col
          .sg-box
            .mono .col
      .grid.mvxl.sg-grid
        .col.col-grow-2
          col col-grow-2
        .col
          col
        .col
          col
      .grid.mvxl.sg-grid
        .col.col-6 50%
        .col.col-3 25%
        .col.col-3 25%
      -# .grid.mvxl.sg-grid
      -#   .col.col-6
      -#     50
      -#   .col.col-3
      -#     25
      -#   .col.col-3
      -#     25
      -# .grid.mvxl.sg-grid
      -#   .col col
      -# .grid.mvxl.sg-grid
      -#   .col.col-grow-3
      -#      col col-grow-3
      -#   .col
      -#     col
      .grid.mvxl.sg-grid
        .col.col-9
          3/4
        .col.col-3
          1/4


      .grid.mvxxxl
        .col
          .sg-box
            Etiam porta sem malesuada magna mollis euismod. Fusce
        .col
          .sg-box
            1/2?
